model {
  
  #alpha ~ dbeta(1,1)
  #beta ~ dbeta(1,1)
  #gamma ~ dbeta(1,1)
  #eta ~ dbeta(1,1)
  
  # Initialize a flag to control the loop
  flag <- TRUE
  
  # Start the loop
  while (flag) {
    # Sample alpha, beta, gamma, and eta from the beta distribution
    alpha ~ dbeta(1,1)
    beta ~ dbeta(1,1)
    gamma ~ dbeta(1,1)
    eta ~ dbeta(1,1)
    
    # Check that (1-alpha-beta) >= 0 and (1-gamma-eta) >= 0
    if (1-alpha-beta < 0 || 1-gamma-eta < 0) {
      # Discard the samples and skip the rest of the loop
      alpha <- NA
      beta <- NA
      gamma <- NA
      eta <- NA
      next
    }
    
    # If the condition is met, set the flag to FALSE to stop the loop
    flag <- FALSE
  }
  
  # Do something with alpha, beta, gamma, and eta
  
  
  
  
  P[1,1] <- 1
  
  P[1,2] <- 0
  
  P[1,3] <- 0
  
  P[1,4] <- 0
  
  
  
  P[2,1] <- alpha
  
  P[2,2] <- 1-alpha-beta
  
  P[2,3] <- beta
  
  P[2,4] <- 0
  
  
  
  P[3,1] <- 0
  
  P[3,2] <- gamma
  
  P[3,3] <- 1-gamma-eta
  
  P[3,4] <- eta
  
  
  
  P[4,1] <- 0
  
  P[4,2] <- 0
  
  P[4,3] <- 0
  
  P[4,4] <- 1
  
  
  
  state[1] ~ dcat(c(.25,.25,.25,.25))
  
  
  
  
  for (t in 2:ntrials) {
    
    p[1:4,t] <- P[state[t-1],] # set p vector for rcat, depends in previous state
    
    state[t] ~ dcat(p[1:4,t]) #current state sampled from cat. dist.
    
    
    
    theta[t] <- ifelse(state[t]<3,1,0)
    
    
    X[t] ~ dbin(1,theta[t])
    
  }
  
}